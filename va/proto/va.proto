syntax = "proto3";

package va;
option go_package = "github.com/letsencrypt/boulder/va/proto";

import "core/proto/core.proto";

// PerformValidation performs a local Domain Control Validation (DCV) and CAA
// check for the provided challenge and dnsName. If called on the primary VA and
// local validation passes, it will also perform DCV and CAA checks using the
// configured remote VAs. It returns a validation result and an error if the
// validation failed. The returned result will always contain a list of
// validation records, even when it also contains a problem. This method is not
// MPIC-compliant.
//
// DoDCV performs a local Domain Control Validation (DCV) for the provided
// challenge. If called on the primary VA and local validation passes, it will
// also perform an MPIC-compliant DCV using the configured remote VAs. It
// returns a validation result and an error if the validation failed. The
// returned result will always contain a list of validation records, even when
// it also contains a problem. This method does not check CAA records and should
// not be used as a replacement for VA.PerformValidation.
service VA {
  rpc PerformValidation(PerformValidationRequest) returns (ValidationResult) {}
  rpc DoDCV(DCVRequest) returns (ValidationResult) {}
}

service CAA {
  rpc IsCAAValid(IsCAAValidRequest) returns (IsCAAValidResponse) {}
}

message IsCAAValidRequest {
  // NOTE: Domain may be a name with a wildcard prefix (e.g. `*.example.com`)
  string domain = 1;
  string validationMethod = 2;
  int64 accountURIID = 3;
}

// If CAA is valid for the requested domain, the problem will be empty
message IsCAAValidResponse {
  core.ProblemDetails problem = 1;
}

message PerformValidationRequest {
  string dnsName = 1;
  core.Challenge challenge = 2;
  AuthzMeta authz = 3;
  string expectedKeyAuthorization = 4;
}

message AuthzMeta {
  string id = 1;
  int64 regID = 2;
}

message ValidationResult {
  repeated core.ValidationRecord records = 1;
  core.ProblemDetails problems = 2;
  string perspective = 3;
  string rir = 4;
}

message DCVRequest {
  core.Identifier identifier = 1;
  core.Challenge challenge = 2;
  int64 regID = 3;
  string authzID = 4;
  string expectedKeyAuthorization = 5;
}
